### YamlMime:UniversalReference
items:
  - uid: sp-http.DigestCache
    summary: >-
      IDigestCache is an internal service used by SPHttpClient to maintain a cache of request digests for each SPWeb
      URL. A request digest is a security token that the SharePoint server requires for for any REST write operation,
      specified via the "X-RequestDigest" HTTP header. It is obtained by calling the "/\_api/contextinfo" REST endpoint,
      and expires after a server configurable amount of time.


      For more information, see the MSDN article ["Complete basic operations using SharePoint 2013 REST
      endpoints"](https://msdn.microsoft.com/en-us/library/office/jj164022.aspx)
    name: DigestCache
    fullName: DigestCache
    langs:
      - typeScript
    type: class
    implements:
      - sp-http.IDigestCache
    package: sp-http
    children:
      - sp-http.DigestCache.(constructor)
      - sp-http.DigestCache.addDigestToCache
      - sp-http.DigestCache.clearAllDigests
      - sp-http.DigestCache.clearDigest
      - sp-http.DigestCache.fetchDigest
      - sp-http.DigestCache.serviceKey
  - uid: sp-http.DigestCache.(constructor)
    summary: Constructs a new instance of the `DigestCache` class
    name: (constructor)(serviceScope)
    fullName: (constructor)(serviceScope)
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(serviceScope: ServiceScope);'
      parameters:
        - id: serviceScope
          description: ''
          type:
            - sp-core-library.ServiceScope
  - uid: sp-http.DigestCache.addDigestToCache
    summary: >-
      Inserts a specific request digest value into the cache. Normally this is unnecessary because the framework will
      automatically issue a REST request to fetch the digest when necessary; however, in advanced scenarios
      addDigestToCache() can be used to avoid the overhead of the REST call.
    name: 'addDigestToCache(webUrl, digestValue, expirationTimestamp)'
    fullName: 'addDigestToCache(webUrl, digestValue, expirationTimestamp)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'addDigestToCache(webUrl: string, digestValue: string, expirationTimestamp: number): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: webUrl
          description: The URL of the SPWeb that the API call will be issued to. This may be a server-relative or absolute URL.
          type:
            - string
        - id: digestValue
          description: >-
            The digest value, which is an opaque that must be generated by the SharePoint server. The syntax will look
            something like this: "0x0B85...2EAC,29 Jan 2016 01:23:45 -0000"
          type:
            - string
        - id: expirationTimestamp
          description: >-
            A future point in time, as measured by performance.now(), after which the digest value will no longer be
            valid. NOTE: The expirationTime is a DOMHighResTimeStamp value whose units are fractional milliseconds; for
            example, to specify an expiration "5 seconds from right now", use performance.now()+5000.
          type:
            - number
  - uid: sp-http.DigestCache.clearAllDigests
    summary: Clears all values from the cache.
    name: clearAllDigests()
    fullName: clearAllDigests()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearAllDigests(): void;'
      return:
        type:
          - void
        description: ''
  - uid: sp-http.DigestCache.clearDigest
    summary: >-
      Clears the cached digest for the specified SPWeb URL. This operation is useful e.g. if an error indicates that a
      digest was invalidated prior to its expiration time.
    name: clearDigest(webUrl)
    fullName: clearDigest(webUrl)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'clearDigest(webUrl: string): boolean;'
      return:
        type:
          - boolean
        description: Returns true if a cache entry was found and deleted; false otherwise.
      parameters:
        - id: webUrl
          description: The URL of the SPWeb whose digest should be cleared. This may be a server-relative or absolute URL.
          type:
            - string
  - uid: sp-http.DigestCache.fetchDigest
    summary: >-
      Returns a digest string for the specified SPWeb URL. If the cache already contains a usable value, the promise is
      fulfilled immediately. Otherwise, the promise will be pending and resolve after an HTTP request obtains the
      digest, which will be added to the cache.
    name: fetchDigest(webUrl)
    fullName: fetchDigest(webUrl)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'fetchDigest(webUrl: string): Promise<string>;'
      return:
        type:
          - Promise<string>
        description: A promise that is fulfilled with the digest value.
      parameters:
        - id: webUrl
          description: The URL of the SPWeb that the API call will be issued to. This may be a server-relative or absolute URL.
          type:
            - string
  - uid: sp-http.DigestCache.serviceKey
    summary: The service key for IDigestCache.
    name: serviceKey
    fullName: serviceKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'static readonly serviceKey: ServiceKey<IDigestCache>;'
      return:
        type:
          - ServiceKey<IDigestCache>
