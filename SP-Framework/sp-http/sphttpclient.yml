### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-http!SPHttpClient:class'
    summary: >-
      SPHttpClient is used to perform REST calls against SharePoint. It adds default headers, manages the digest needed
      for writes, and collects telemetry that helps the service to monitor the performance of an application.
    remarks: >-
      This class is marked as `@sealed`. Subclasses should not extend it.


      For communicating with other internet services, use the [HttpClient](xref:@microsoft/sp-http!HttpClient:class)
      class.
    name: SPHttpClient
    fullName: SPHttpClient
    langs:
      - typeScript
    type: class
    package: '@microsoft/sp-http!'
    children:
      - '@microsoft/sp-http!SPHttpClient:constructor(1)'
      - '@microsoft/sp-http!SPHttpClient#beginBatch:member(1)'
      - '@microsoft/sp-http!SPHttpClient.configurations:member'
      - '@microsoft/sp-http!SPHttpClient#fetch:member(1)'
      - '@microsoft/sp-http!SPHttpClient#get:member(1)'
      - '@microsoft/sp-http!SPHttpClient.getWebUrlFromRequestUrl:member(1)'
      - '@microsoft/sp-http!SPHttpClient#post:member(1)'
      - '@microsoft/sp-http!SPHttpClient.serviceKey:member'
  - uid: '@microsoft/sp-http!SPHttpClient:constructor(1)'
    summary: Constructs a new instance of the `SPHttpClient` class
    name: (constructor)(serviceScope)
    fullName: (constructor)(serviceScope)
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(serviceScope: ServiceScope);'
      parameters:
        - id: serviceScope
          description: ''
          type:
            - '@microsoft/sp-core-library!ServiceScope:class'
  - uid: '@microsoft/sp-http!SPHttpClient#beginBatch:member(1)'
    summary: 'Begins an ODATA batch, which allows multiple REST queries to be bundled into a single web request.'
    isPreview: true
    name: beginBatch(batchCreationOptions)
    fullName: beginBatch(batchCreationOptions)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'beginBatch(batchCreationOptions?: ISPHttpClientBatchCreationOptions): SPHttpClientBatch;'
      return:
        type:
          - '@microsoft/sp-http!default:class'
        description: >-
          An [SPHttpClientBatch](xref:@microsoft/sp-http!SPHttpClientBatch:class) object used to manage the batch
          operation.
      parameters:
        - id: batchCreationOptions
          description: ''
          type:
            - '@microsoft/sp-http!ISPHttpClientBatchCreationOptions:interface'
  - uid: '@microsoft/sp-http!SPHttpClient.configurations:member'
    summary: The standard predefined SPHttpClientConfiguration objects for use with the SPHttpClient class.
    name: configurations
    fullName: configurations
    langs:
      - typeScript
    type: property
    syntax:
      content: 'static readonly configurations: ISPHttpClientConfigurations;'
      return:
        type:
          - '@microsoft/sp-http!ISPHttpClientConfigurations:interface'
  - uid: '@microsoft/sp-http!SPHttpClient#fetch:member(1)'
    summary: Perform a REST service call.
    remarks: >-
      Generally, the parameters and semantics for SPHttpClient.fetch() are essentially the same as the WHATWG API
      standard that is documented here: https://fetch.spec.whatwg.org/


      The SPHttpClient subclass adds some additional behaviors that are convenient when working with SharePoint ODATA
      API's (which can be avoided by using HttpClient instead):


      - Default "Accept" and "Content-Type" headers are added if not explicitly specified.


      - For write operations, an "X-RequestDigest" header is automatically added


      - The request digest token is automatically fetched and stored in a cache, with support for preloading


      For a write operation, SPHttpClient will automatically add the "X-RequestDigest" header, which may need to be
      obtained by issuing a separate request such as "https://example.com/sites/sample/\_api/contextinfo". Typically the
      appropriate SPWeb URL can be guessed by looking for a reserved URL segment such as "\_api" in the original URL
      passed to fetch(); if not, use ISPHttpClientOptions.webUrl to specify it explicitly.
    name: 'fetch(url, configuration, options)'
    fullName: 'fetch(url, configuration, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        fetch(url: string, configuration: SPHttpClientConfiguration, options: ISPHttpClientOptions):
        Promise<SPHttpClientResponse>;
      return:
        type:
          - '@microsoft/sp-http!SPHttpClient#fetch~0:complex'
        description: >-
          A promise with behavior similar to WHATWG fetch(). This promise will resolve normally (with
          [HttpClientResponse.ok](xref:@microsoft/sp-http!HttpClientResponse#ok:member) being false) for error status
          codes such as HTTP 404 or 500. The promise will only reject for network failures or other errors that prevent
          communication with the server.
      parameters:
        - id: url
          description: the URL to fetch
          type:
            - string
        - id: configuration
          description: >-
            determines the default behavior of SPHttpClient; normally this should be the latest version number from
            SPHttpClientConfigurations
          type:
            - '@microsoft/sp-http!default:class'
        - id: options
          description: additional options that affect the request
          type:
            - '@microsoft/sp-http!ISPHttpClientOptions:interface'
  - uid: '@microsoft/sp-http!SPHttpClient#get:member(1)'
    summary: 'Calls fetch(), but sets the method to "GET".'
    name: 'get(url, configuration, options)'
    fullName: 'get(url, configuration, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        get(url: string, configuration: SPHttpClientConfiguration, options?: ISPHttpClientOptions):
        Promise<SPHttpClientResponse>;
      return:
        type:
          - '@microsoft/sp-http!SPHttpClient#get~0:complex'
        description: >-
          A promise with behavior similar to WHATWG fetch(). This promise will resolve normally (with
          [HttpClientResponse.ok](xref:@microsoft/sp-http!HttpClientResponse#ok:member) being false) for error status
          codes such as HTTP 404 or 500. The promise will only reject for network failures or other errors that prevent
          communication with the server.
      parameters:
        - id: url
          description: the URL to fetch
          type:
            - string
        - id: configuration
          description: >-
            determines the default behavior of SPHttpClient; normally this should be the latest version number from
            SPHttpClientConfigurations
          type:
            - '@microsoft/sp-http!default:class'
        - id: options
          description: additional options that affect the request
          type:
            - '@microsoft/sp-http!ISPHttpClientOptions:interface'
  - uid: '@microsoft/sp-http!SPHttpClient.getWebUrlFromRequestUrl:member(1)'
    summary: Use a heuristic to infer the base URL for authentication.
    remarks: >-
      Attempts to infer the SPWeb URL associated with the provided REST URL, by looking for common SharePoint path
      components such as "\_api", "\_layouts", or "\_vit\_bin". This is necessary for operations such as the
      X-RequestDigest and ODATA batching, which require POSTing to a separate REST endpoint in order to complete a
      request.


      For example, if the requestUrl is "/sites/site/web/\_api/service", the returned URL would be "/sites/site/web". Or
      if the requestUrl is "http://example.com/\_layouts/service", the returned URL would be "http://example.com".


      If the URL cannot be determined, an exception is thrown.
    name: getWebUrlFromRequestUrl(requestUrl)
    fullName: getWebUrlFromRequestUrl(requestUrl)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static getWebUrlFromRequestUrl(requestUrl: string): string;'
      return:
        type:
          - string
        description: the inferred SPWeb URL
      parameters:
        - id: requestUrl
          description: The URL for a SharePoint REST service
          type:
            - string
  - uid: '@microsoft/sp-http!SPHttpClient#post:member(1)'
    summary: 'Calls fetch(), but sets the method to "POST".'
    name: 'post(url, configuration, options)'
    fullName: 'post(url, configuration, options)'
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        post(url: string, configuration: SPHttpClientConfiguration, options: ISPHttpClientOptions):
        Promise<SPHttpClientResponse>;
      return:
        type:
          - '@microsoft/sp-http!SPHttpClient#post~0:complex'
        description: >-
          A promise with behavior similar to WHATWG fetch(). This promise will resolve normally (with
          [HttpClientResponse.ok](xref:@microsoft/sp-http!HttpClientResponse#ok:member) being false) for error status
          codes such as HTTP 404 or 500. The promise will only reject for network failures or other errors that prevent
          communication with the server.
      parameters:
        - id: url
          description: the URL to fetch
          type:
            - string
        - id: configuration
          description: >-
            determines the default behavior of SPHttpClient; normally this should be the latest version number from
            SPHttpClientConfigurations
          type:
            - '@microsoft/sp-http!default:class'
        - id: options
          description: additional options that affect the request
          type:
            - '@microsoft/sp-http!ISPHttpClientOptions:interface'
  - uid: '@microsoft/sp-http!SPHttpClient.serviceKey:member'
    summary: The service key for SPHttpClient.
    name: serviceKey
    fullName: serviceKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'static readonly serviceKey: ServiceKey<SPHttpClient>;'
      return:
        type:
          - '@microsoft/sp-http!SPHttpClient.serviceKey~0:complex'
references:
  - uid: '@microsoft/sp-core-library!ServiceScope:class'
    name: ServiceScope
  - uid: '@microsoft/sp-http!default:class'
    name: SPHttpClientBatch
  - uid: '@microsoft/sp-http!ISPHttpClientBatchCreationOptions:interface'
    name: ISPHttpClientBatchCreationOptions
  - uid: '@microsoft/sp-http!ISPHttpClientConfigurations:interface'
    name: ISPHttpClientConfigurations
  - uid: '@microsoft/sp-http!SPHttpClient#fetch~0:complex'
    name: Promise<SPHttpClientResponse>
    fullName: Promise<default>
    spec.typeScript:
      - uid: '!Promise:class'
        name: Promise
        fullName: Promise
      - name: <
        fullName: <
      - uid: '@microsoft/sp-http!default:class'
        name: SPHttpClientResponse
        fullName: default
      - name: '>'
        fullName: '>'
  - uid: '@microsoft/sp-http!ISPHttpClientOptions:interface'
    name: ISPHttpClientOptions
  - uid: '@microsoft/sp-http!SPHttpClient#get~0:complex'
    name: Promise<SPHttpClientResponse>
    fullName: Promise<default>
    spec.typeScript:
      - uid: '!Promise:class'
        name: Promise
        fullName: Promise
      - name: <
        fullName: <
      - uid: '@microsoft/sp-http!default:class'
        name: SPHttpClientResponse
        fullName: default
      - name: '>'
        fullName: '>'
  - uid: '@microsoft/sp-http!SPHttpClient#post~0:complex'
    name: Promise<SPHttpClientResponse>
    fullName: Promise<default>
    spec.typeScript:
      - uid: '!Promise:class'
        name: Promise
        fullName: Promise
      - name: <
        fullName: <
      - uid: '@microsoft/sp-http!default:class'
        name: SPHttpClientResponse
        fullName: default
      - name: '>'
        fullName: '>'
  - uid: '@microsoft/sp-http!SPHttpClient.serviceKey~0:complex'
    name: ServiceKey<SPHttpClient>
    fullName: ServiceKey<default>
    spec.typeScript:
      - uid: '@microsoft/sp-core-library!ServiceKey:class'
        name: ServiceKey
        fullName: ServiceKey
      - name: <
        fullName: <
      - uid: '@microsoft/sp-http!default:class'
        name: SPHttpClient
        fullName: default
      - name: '>'
        fullName: '>'
