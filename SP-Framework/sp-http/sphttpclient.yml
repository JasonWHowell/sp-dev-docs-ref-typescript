### YamlMime:UniversalReference
items:
  - uid: sp-http.SPHttpClient
    summary: >-
      SPHttpClient is used to perform REST calls against SharePoint. It adds default headers, manages the digest needed
      for writes, and collects telemetry that helps the service to monitor the performance of an application.
    remarks: >-
      For communicating with Microsoft Graph, use the [GraphHttpClient](xref:sp-http.GraphHttpClient) class instead. For
      communicating with other internet services, use the [HttpClient](xref:sp-http.HttpClient) class.
    name: SPHttpClient
    fullName: sp-http.SPHttpClient
    langs:
      - typeScript
    type: class
    package: sp-http
    children:
      - sp-http.SPHttpClient.constructor
      - sp-http.SPHttpClient.beginBatch
      - sp-http.SPHttpClient.configurations
      - sp-http.SPHttpClient.fetch
      - sp-http.SPHttpClient.get
      - sp-http.SPHttpClient.getWebUrlFromRequestUrl
      - sp-http.SPHttpClient.post
      - sp-http.SPHttpClient.serviceKey
  - uid: sp-http.SPHttpClient.constructor
    summary: 'Constructs a new instance of the [SPHttpClient](xref:sp-http.SPHttpClient) class'
    name: constructor(serviceScope)
    fullName: sp-http.SPHttpClient.constructor
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(serviceScope: ServiceScope);'
      parameters:
        - id: serviceScope
          description: ''
          type:
            - ServiceScope
  - uid: sp-http.SPHttpClient.beginBatch
    summary: 'Begins an ODATA batch, which allows multiple REST queries to be bundled into a single web request.'
    name: beginBatch(batchCreationOptions)
    fullName: sp-http.SPHttpClient.beginBatch
    langs:
      - typeScript
    type: method
    syntax:
      content: 'public beginBatch(batchCreationOptions?: ISPHttpClientBatchCreationOptions): SPHttpClientBatch;'
      return:
        type:
          - SPHttpClientBatch
        description: a promise that will return the result
      parameters:
        - id: batchCreationOptions
          description: ''
          type:
            - ISPHttpClientBatchCreationOptions
  - uid: sp-http.SPHttpClient.configurations
    summary: The standard predefined SPHttpClientConfiguration objects for use with the SPHttpClient class.
    name: configurations
    fullName: sp-http.SPHttpClient.configurations
    langs:
      - typeScript
    type: property
    syntax:
      content: 'public static configurations: ISPHttpClientConfigurations;'
      return:
        type:
          - ISPHttpClientConfigurations
  - uid: sp-http.SPHttpClient.fetch
    summary: Perform a REST service call.
    remarks: >-
      Generally, the parameters and semantics for SPHttpClient.fetch() are essentially the same as the WHATWG API
      standard that is documented here: https://fetch.spec.whatwg.org/ 

       The SPHttpClient subclass adds some additional behaviors that are convenient when working with SharePoint ODATA API's (which can be avoided by using HttpClient instead): 

       - Default "Accept" and "Content-Type" headers are added if not explicitly specified. 

       - For write operations, an "X-RequestDigest" header is automatically added 

       - The request digest token is automatically fetched and stored in a cache, with support for preloading 

       For a write operation, SPHttpClient will automatically add the "X-RequestDigest" header, which may need to be obtained by issuing a seperate request such as "https://example.com/sites/sample/\_api/contextinfo". Typically the appropriate SPWeb URL can be guessed by looking for a reserved URL segment such as "\_api" in the original URL passed to fetch(); if not, use ISPHttpClientOptions.webUrl to specify it explicitly.
    name: 'fetch(url, configuration, options)'
    fullName: sp-http.SPHttpClient.fetch
    langs:
      - typeScript
    type: method
    syntax:
      content: "public fetch(url: string, configuration: SPHttpClientConfiguration,\r\n    options: ISPHttpClientOptions): Promise<SPHttpClientResponse>;"
      return:
        type:
          - Promise<SPHttpClientResponse>
        description: a promise that will return the result
      parameters:
        - id: url
          description: the URL to fetch
          type:
            - string
        - id: configuration
          description: >-
            determines the default behavior of SPHttpClient; normally this should be the latest version number from
            SPHttpClientConfigurations
          type:
            - SPHttpClientConfiguration
        - id: options
          description: additional options that affect the request
          type:
            - ISPHttpClientOptions
  - uid: sp-http.SPHttpClient.get
    summary: 'Calls fetch(), but sets the method to "GET".'
    name: 'get(url, configuration, options)'
    fullName: sp-http.SPHttpClient.get
    langs:
      - typeScript
    type: method
    syntax:
      content: "public get(url: string, configuration: SPHttpClientConfiguration,\r\n    options?: ISPHttpClientOptions): Promise<SPHttpClientResponse>;"
      return:
        type:
          - Promise<SPHttpClientResponse>
        description: a promise that will return the result
      parameters:
        - id: url
          description: the URL to fetch
          type:
            - string
        - id: configuration
          description: >-
            determines the default behavior of SPHttpClient; normally this should be the latest version number from
            SPHttpClientConfigurations
          type:
            - SPHttpClientConfiguration
        - id: options
          description: additional options that affect the request
          type:
            - ISPHttpClientOptions
  - uid: sp-http.SPHttpClient.getWebUrlFromRequestUrl
    summary: Guess the base URL for authentication.
    remarks: >-
      This uses a heuristic to guess the SPWeb URL associated with the provided REST URL. This is necessary for
      operations such as the X-RequestDigest and ODATA batching, which require POSTing to a separate REST endpoint in
      order to complete a request. 

       For example, if the requestUrl is "/sites/site/web/\_api/service", the returned URL would be "/sites/site/web". Or if the requestUrl is "http://example.com/\_layouts/service", the returned URL would be "http://example.com".
    name: getWebUrlFromRequestUrl(requestUrl)
    fullName: sp-http.SPHttpClient.getWebUrlFromRequestUrl
    langs:
      - typeScript
    type: method
    syntax:
      content: 'public static getWebUrlFromRequestUrl(requestUrl: string): string;'
      return:
        type:
          - string
        description: the inferred SPWeb URL
      parameters:
        - id: requestUrl
          description: The URL for a SharePoint REST service
          type:
            - string
  - uid: sp-http.SPHttpClient.post
    summary: 'Calls fetch(), but sets the method to "POST".'
    name: 'post(url, configuration, options)'
    fullName: sp-http.SPHttpClient.post
    langs:
      - typeScript
    type: method
    syntax:
      content: "public post(url: string, configuration: SPHttpClientConfiguration,\r\n    options: ISPHttpClientOptions): Promise<SPHttpClientResponse>;"
      return:
        type:
          - Promise<SPHttpClientResponse>
        description: a promise that will return the result
      parameters:
        - id: url
          description: the URL to fetch
          type:
            - string
        - id: configuration
          description: >-
            determines the default behavior of SPHttpClient; normally this should be the latest version number from
            SPHttpClientConfigurations
          type:
            - SPHttpClientConfiguration
        - id: options
          description: additional options that affect the request
          type:
            - ISPHttpClientOptions
  - uid: sp-http.SPHttpClient.serviceKey
    summary: The service key for SPHttpClient.
    name: serviceKey
    fullName: sp-http.SPHttpClient.serviceKey
    langs:
      - typeScript
    type: property
    syntax:
      content: 'public static serviceKey: ServiceKey<SPHttpClient>;'
      return:
        type:
          - ServiceKey<SPHttpClient>
