### YamlMime:UniversalReference
items:
  - uid: sp-dialog.BaseDialog
    summary: >-
      The base class for implementing dialogs in SharePoint Framework. This provides a supported way for showing dialogs
      to the user inside SharePoint Framework components.
    remarks: >-
      Extend this class to create dialogs for SharePoint Framework. By following the guidelines in implementation, the
      framework can ensure that the dialogs are shown in a user-friendly manner. While the content of the dialog is
      controlled by this class by implementing the render method, the framework can decide when to show the dialog and
      how to render the overlay and modal. The application on the page can also have control on allowing dialogs to
      show. Refer to the documentation of the individual methods and properties to learn more about how to extend and
      use this class.
    name: BaseDialog
    fullName: sp-dialog.BaseDialog
    langs:
      - typeScript
    type: class
    package: sp-dialog
    children:
      - sp-dialog.BaseDialog.constructor
      - sp-dialog.BaseDialog.close
      - sp-dialog.BaseDialog.domElement
      - sp-dialog.BaseDialog.isHidden
      - sp-dialog.BaseDialog.isOpen
      - sp-dialog.BaseDialog.isSecondary
      - sp-dialog.BaseDialog.onAfterClose
      - sp-dialog.BaseDialog.onBeforeOpen
      - sp-dialog.BaseDialog.render
      - sp-dialog.BaseDialog.secondaryDialogProvider
      - sp-dialog.BaseDialog.show
  - uid: sp-dialog.BaseDialog.constructor
    summary: Constructor for the BaseDialog class.
    remarks: >-
      It is important to keep the constructor lightweight. Use onBeforeOpen() for doing heavy-weight initialization that
      is needed for rendering the dialog such as resource allocations and asynchronous calls to fetch data. You can use
      the constructor to set initial parameters of your dialog such as references to resources in your application. The
      reason for this is that dialogs are usually constructed upon a UI event e.g. a button click, but the dialog may
      not always be shown right after construction. Keeping the constructor lightweight ensures smooth user experience
      and avoids doing throw-away work in case the dialog is not shown later e.g. if the framework rejects it. Another
      benefit of doing this is avoiding memory leaks by doing all the allocations and disposals in symmetric
      onBeforeOpen() and onAfterClose() events. If you allocate resources in the constructor, you have a memory leak
      because there is no guarantee onAfterClose() will get called, and onAfterClose() is your only opportunity to
      dispose.
    name: constructor(config)
    fullName: sp-dialog.BaseDialog.constructor
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(config?: IDialogConfiguration);'
      parameters:
        - id: config
          description: >-
            the dialog configuration that affects how the dialog is displayed Example: constructor(cacheReference: any)
            { super(); this.\_cache = cacheReference; // This is okay. Keeping a reference to my internal cache.
            this.\_cache.refresh(); // This is bad practice. // If you need to refresh the cache (or fetch data) for
            rendering, do it in onBeforeOpen() }
          type:
            - IDialogConfiguration
  - uid: sp-dialog.BaseDialog.close
    summary: >-
      Close the dialog. This will void the permission to show for this dialog. Every dialog should have a mechanism to
      eventually close to avoid blocking the user interface. If called on an inactive dialog it will abort the request
      to show.
    name: close()
    fullName: sp-dialog.BaseDialog.close
    langs:
      - typeScript
    type: method
    syntax:
      content: 'close(): Promise<void>;'
      return:
        type:
          - Promise<void>
        description: 'A promise that resolves when the dialog is visually closed, or if it was already closed'
  - uid: sp-dialog.BaseDialog.domElement
    summary: |-
      Use this property to access the container element provided by the framework for rendering.

      See [BaseDialog.render](xref:sp-dialog.BaseDialog.render) for more information on rendering.
    name: domElement
    fullName: sp-dialog.BaseDialog.domElement
    langs:
      - typeScript
    type: property
    syntax:
      content: 'protected readonly domElement: HTMLElement;'
      return:
        type:
          - HTMLElement
  - uid: sp-dialog.BaseDialog.isHidden
    summary: >-
      If the dialog is visually hidden. This happens when the dialog goes behind a secondary dialog. Note that this is
      different from closed, because the dialog still has the permission to show and will eventually unhide. This
      returns false if the dialog is closed.
    name: isHidden
    fullName: sp-dialog.BaseDialog.isHidden
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isHidden: boolean;'
      return:
        type:
          - boolean
  - uid: sp-dialog.BaseDialog.isOpen
    summary: >-
      If the dialog is visually open. This returns true during onBeforeOpen() because there is a visual component. It
      returns false when the dialog is hidden.
    name: isOpen
    fullName: sp-dialog.BaseDialog.isOpen
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isOpen: boolean;'
      return:
        type:
          - boolean
  - uid: sp-dialog.BaseDialog.isSecondary
    summary: If the dialog is a secondary dialog. This means that there is another dialog hidden behind this dialog.
    isPreview: true
    name: isSecondary
    fullName: sp-dialog.BaseDialog.isSecondary
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly isSecondary: boolean;'
      return:
        type:
          - boolean
  - uid: sp-dialog.BaseDialog.onAfterClose
    summary: >-
      This method is called after the dialog is visually closed and gives an opportunity for doing clean up. The dialog
      lifecycle completes after closing and there should be no resources left inside the object. Even though the dialog
      may be revived again for a new lifecycle using show() method, this is considered a whole new lifecycle that should
      reallocate its own resources. If there are any resources that you would like to keep for multiple lifecycles,
      consider allocating it outside the dialog object and passing its reference to the dialog constructor.
    name: onAfterClose()
    fullName: sp-dialog.BaseDialog.onAfterClose
    langs:
      - typeScript
    type: method
    syntax:
      content: 'protected onAfterClose(): void;'
      return:
        type:
          - void
        description: ''
  - uid: sp-dialog.BaseDialog.onBeforeOpen
    summary: >-
      This method is called before the render method and can be overridden to make preparations for rendering. The
      loading indicator is displayed during the lifetime of this method.
    remarks: All resource allocations in onBeforeOpen() should be properly disposed in onAfterClose() to a avoid memory leak.
    name: onBeforeOpen()
    fullName: sp-dialog.BaseDialog.onBeforeOpen
    langs:
      - typeScript
    type: method
    syntax:
      content: 'protected onBeforeOpen(): Promise<void>;'
      return:
        type:
          - Promise<void>
        description: >-
          A promise that resolves when the operations are done and the dialog is ready to render. If the promise is
          rejected, the dialog will not be rendered and onAfterClose() will not be called.
  - uid: sp-dialog.BaseDialog.render
    summary: >-
      The render method must be implemented to render the content of the dialog in the conrainer element provided by the
      framework. Use this.domElement to access this container. The container is inside a modal rendered in the center of
      the page on top of a dark overlay.
    remarks: >-
      The render method is called once after the modal element is created and opened. It is recommended to use
      onBeforeOpen() for doing non-UI preperations for your rendering that might take a long time. This will ensure that
      the framework can show a friendly UI such as a spinner to let the user know that the dialog is being prepared. If
      you choose to do your initialization or other costly operations inside render method, make sure to have a friendly
      UI so the user is informed about the state of your dialog. Otherwise, an empty element is shown to the user which
      is a bad user experience practice.
    name: render()
    fullName: sp-dialog.BaseDialog.render
    langs:
      - typeScript
    type: method
    syntax:
      content: 'protected abstract render(): void;'
      return:
        type:
          - void
        description: ''
  - uid: sp-dialog.BaseDialog.secondaryDialogProvider
    summary: >-
      An active dialog is permitted to show a secondary dialog on top of itself. By design, only two layers of dialogs
      are permitted.
    remarks: >-
      Secondary dialogs do not have to wait for permission and will immediately be shown or rejected. All calls to show
      a secondary dialog reject while there is already a secondary dialog showing. This property may be undefined if a
      secondary dialog is not available i.e. the current dialog is secondary itself or the dialog is not active.
    isPreview: true
    name: secondaryDialogProvider
    fullName: sp-dialog.BaseDialog.secondaryDialogProvider
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly secondaryDialogProvider: SecondaryDialogProvider | undefined;'
      return:
        type:
          - SecondaryDialogProvider | undefined
  - uid: sp-dialog.BaseDialog.show
    summary: Request the framework to show this dialog.
    name: show(options)
    fullName: sp-dialog.BaseDialog.show
    langs:
      - typeScript
    type: method
    syntax:
      content: 'show(options?: IDialogShowOptions): Promise<void>;'
      return:
        type:
          - Promise<void>
        description: >-
          A promise that resolves once the dialog is successfully closed (after being shown). The promise rejects if the
          request is rejected or aborted.
      parameters:
        - id: options
          description: 'Dialog showing options. See[IDialogShowOptions](xref:sp-dialog.IDialogShowOptions) for more information.'
          type:
            - IDialogShowOptions
