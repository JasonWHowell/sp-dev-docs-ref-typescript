### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-application-base!BaseApplicationCustomizer:class'
    summary: >-
      This is the base class that third parties should extend when implementing a client-side extension that runs when
      an application is first starting.
    remarks: >-
      In the component manifest, the "extensionType" should be set to "ApplicationCustomizer".


      Example usage scenarios for an application customizer might include: rendering custom UI elements inside a
      SharePoint content placeholder, tracking page load statistics, or automatically logging the user out after a
      certain time period.
    name: BaseApplicationCustomizer
    fullName: BaseApplicationCustomizer
    langs:
      - typeScript
    type: class
    extends:
      - '@microsoft/sp-extension-base!BaseExtension:class'
    inheritance:
      - type: '@microsoft/sp-extension-base!BaseExtension:class'
        inheritance:
          - type: '@microsoft/sp-component-base!BaseComponent:class'
    package: '@microsoft/sp-application-base!'
    children:
      - '@microsoft/sp-application-base!BaseApplicationCustomizer#context:member'
      - '@microsoft/sp-application-base!BaseApplicationCustomizer#dispose:member(1)'
      - '@microsoft/sp-application-base!BaseApplicationCustomizer#onPlaceholdersChanged:member(1)'
  - uid: '@microsoft/sp-application-base!BaseApplicationCustomizer#context:member'
    name: context
    fullName: context
    langs:
      - typeScript
    type: property
    syntax:
      content: 'protected readonly context: ApplicationCustomizerContext;'
      return:
        type:
          - '@microsoft/sp-application-base!default:class'
  - uid: '@microsoft/sp-application-base!BaseApplicationCustomizer#dispose:member(1)'
    summary: Disposes the component.
    remarks: >-
      Third-party code generally does not need to call this method; it's invoked automatically when the lifecycle ends
      for a web part or extension. To perform custom cleanup when your component is disposed, override the  method.
    name: dispose()
    fullName: dispose()
    langs:
      - typeScript
    type: method
    syntax:
      content: 'dispose(): void;'
      return:
        type:
          - void
        description: ''
  - uid: '@microsoft/sp-application-base!BaseApplicationCustomizer#onPlaceholdersChanged:member(1)'
    summary: >-
      This event method is called when the placeholders of the host application change, come into existence, or
      disappear. virtual
    name: onPlaceholdersChanged(placeholderProvider)
    fullName: onPlaceholdersChanged(placeholderProvider)
    langs:
      - typeScript
    type: method
    syntax:
      content: 'protected onPlaceholdersChanged(placeholderProvider: PlaceholderProvider): void;'
      return:
        type:
          - void
        description: ''
      parameters:
        - id: placeholderProvider
          description: ''
          type:
            - '@microsoft/sp-application-base!default:class'
          optional: false
references:
  - uid: '@microsoft/sp-extension-base!BaseExtension:class'
    name: BaseExtension
  - uid: '@microsoft/sp-component-base!BaseComponent:class'
    name: BaseComponent
  - uid: '@microsoft/sp-application-base!default:class'
    name: ApplicationCustomizerContext
