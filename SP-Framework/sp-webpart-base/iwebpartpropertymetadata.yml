### YamlMime:UniversalReference
items:
  - uid: '@microsoft/sp-webpart-base!IWebPartPropertyMetadata:interface'
    summary: This is the structure used for map values in `IWebPartPropertiesMetadata`
    name: IWebPartPropertyMetadata
    fullName: IWebPartPropertyMetadata
    langs:
      - typeScript
    type: interface
    package: '@microsoft/sp-webpart-base!'
    children:
      - '@microsoft/sp-webpart-base!IWebPartPropertyMetadata#dynamicPropertyType:member'
      - '@microsoft/sp-webpart-base!IWebPartPropertyMetadata#isHtmlString:member'
      - '@microsoft/sp-webpart-base!IWebPartPropertyMetadata#isImageSource:member'
      - '@microsoft/sp-webpart-base!IWebPartPropertyMetadata#isLink:member'
      - '@microsoft/sp-webpart-base!IWebPartPropertyMetadata#isSearchablePlainText:member'
      - '@microsoft/sp-webpart-base!IWebPartPropertyMetadata#shouldNotPersist:member'
  - uid: '@microsoft/sp-webpart-base!IWebPartPropertyMetadata#dynamicPropertyType:member'
    summary: 'If specified, indicates that the property is a dynamic property and the type of the dynamic property.'
    remarks: >-
      If a web part has properties that are dynamically configurable, then use this flag to declare the property as a
      dynamic property by specifying its type. When a property specifies its dynamic property type, then the framework
      ensures that its value can be accessed using 'tryGetValue' anytime in the life cycle of the web part. If a
      property is marked as DynamicProperty in the IWebPartProperties interface, but does not appear in the
      IWebPartPropertiesMetadata with a dynamicPropertyType, then the web part developer will need to manually create
      the DynamicProperty themselves and assign it to the property.


      A web part can configure a default value for the property by specifying it in the properties section of the web
      part's manifest. This value will be used when a dynamic property is constructed for the property.


      Note: Web parts should be able to type cast the resultant value from the `tryGetValue` to suit their needs.
    name: dynamicPropertyType
    fullName: dynamicPropertyType
    langs:
      - typeScript
    type: property
    syntax:
      content: 'dynamicPropertyType?: ''boolean'' | ''number'' | ''string'' | ''array'' | ''object'';'
      return:
        type:
          - '''boolean'' | ''number'' | ''string'' | ''array'' | ''object'''
  - uid: '@microsoft/sp-webpart-base!IWebPartPropertyMetadata#isHtmlString:member'
    summary: Indicates whether the property should be serialized as HTML.
    remarks: >-
      This flag instructs framework to store the value as HTML, so that SharePoint can perform the following services on
      it:


      - normalizing HTML encodings


      - stripping unsafe HTML tags (i.e. for usage with Element.innerHTML)


      - search indexing


      - SharePoint link fix-up


      Only enable this flag for HTML content where these modifications are acceptable. If non-HTML content is provided,
      SharePoint framework might make modifications to convert it to HTML valid. For plain text content that simply
      needs to be exposed to the search index (without any rewriting), use the `isSearchablePlainText` flag instead.
    name: isHtmlString
    fullName: isHtmlString
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isHtmlString?: boolean;'
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-webpart-base!IWebPartPropertyMetadata#isImageSource:member'
    summary: >-
      Indicates if the property contains a link. This allows SharePoint server to treat the value as such and perform
      services like link fix-up, search indexing, loading from CDN, etc.
    name: isImageSource
    fullName: isImageSource
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isImageSource?: boolean;'
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-webpart-base!IWebPartPropertyMetadata#isLink:member'
    summary: >-
      Indicates if the property contains a link. This allows SharePoint server to treat the value as such and perform
      services like search indexing, link fix-up, loading from CDN, etc.
    name: isLink
    fullName: isLink
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isLink?: boolean;'
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-webpart-base!IWebPartPropertyMetadata#isSearchablePlainText:member'
    summary: Indicates if the property contains plain text that should be search-indexed by SharePoint.
    remarks: >-
      This flag instructs the framework to store the property in a representation that supports search indexing. The
      content will be treated as plain text; SharePoint will not modify the string in any way, and special HTML
      characters may be stored encoded and appear in search results. If your string contains HTML markup, use the
      isHtmlString setting instead.


      Security note: For security reasons, never assign a plain text string to `Element.innerHTML`<!-- -->.
    name: isSearchablePlainText
    fullName: isSearchablePlainText
    langs:
      - typeScript
    type: property
    syntax:
      content: 'isSearchablePlainText?: boolean;'
      return:
        type:
          - boolean
  - uid: '@microsoft/sp-webpart-base!IWebPartPropertyMetadata#shouldNotPersist:member'
    summary: Indicates if the framework should persist the property on the server.
    remarks: >-
      Use this for properties that are only important in run-time, and do not need to persist on the server. This can
      reduce the size of the serialized data of the web part and optimize the web part load time. The property value
      will be removed from the serialized data sent to the server, but this has no effect on the run-time property bag.
      The property value will still be available in the `onBeforeSerialize()` method, and the value will not be cleared
      from the run-time property bag. The initial render of your web part should not depend on the value of the
      property. Setting a default value for the property can be done in `onInit()` method.


      Note that if the property path refers to a property that has a complex object as the value, the whole object will
      be removed from the persisted data.
    name: shouldNotPersist
    fullName: shouldNotPersist
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shouldNotPersist?: boolean;'
      return:
        type:
          - boolean
