### YamlMime:UniversalReference
items:
  - uid: web-apis.Promise
    name: Promise
    fullName: web-apis.Promise
    langs:
      - typeScript
    type: class
    remarks: |+
      **Implements:** `Thenable`

    package: web-apis
    children:
      - web-apis.Promise.constructor
      - web-apis.Promise.all
      - web-apis.Promise.catch
      - web-apis.Promise.race
      - web-apis.Promise.reject
      - web-apis.Promise.resolve
      - web-apis.Promise.then
  - uid: web-apis.Promise.constructor
    summary: |
      Constructs a new instance of the Promise class
    name: constructor()
    fullName: web-apis.Promise.constructor
    langs:
      - typeScript
    type: constructor
    syntax:
      content: 'constructor(callback: (resolve: (value?: T | Thenable<T>) => void, reject: (error?: any) => void) => void);'
  - uid: web-apis.Promise.all
    name: all()
    fullName: web-apis.Promise.all
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        public static all < T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 >(values: [T1 | Thenable<T1>, T2 | Thenable<T2>, T3
        | Thenable<T3>, T4 | Thenable <T4>, T5 | Thenable<T5>, T6 | Thenable<T6>, T7 | Thenable<T7>, T8 | Thenable<T8>,
        T9 | Thenable<T9>, T10 | Thenable<T10>]): Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>;
      return:
        type:
          - 'Promise<[T1, T2, T3, T4, T5, T6, T7, T8, T9, T10]>'
        description: ''
  - uid: web-apis.Promise.catch
    name: catch()
    fullName: web-apis.Promise.catch
    langs:
      - typeScript
    type: method
    syntax:
      content: 'catch < U >(onRejected?: (error: any) => U | Thenable<U>): Promise<U>;'
      return:
        type:
          - Promise<U>
        description: ''
  - uid: web-apis.Promise.race
    name: race()
    fullName: web-apis.Promise.race
    langs:
      - typeScript
    type: method
    syntax:
      content: 'public static race < T >(promises: (T | Thenable<T>)[]): Promise<T>;'
      return:
        type:
          - Promise<T>
        description: ''
  - uid: web-apis.Promise.reject
    name: reject()
    fullName: web-apis.Promise.reject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'public static reject(error: any): Promise<any>;'
      return:
        type:
          - Promise<any>
        description: ''
  - uid: web-apis.Promise.resolve
    name: resolve()
    fullName: web-apis.Promise.resolve
    langs:
      - typeScript
    type: method
    syntax:
      content: 'public static resolve < T >(value?: T | Thenable<T>): Promise<T>;'
      return:
        type:
          - Promise<T>
        description: ''
  - uid: web-apis.Promise.then
    name: then()
    fullName: web-apis.Promise.then
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        then < U >(onFulfilled?: (value: T) => U | Thenable<U>, onRejected?: (error: any) => U | Thenable<U>):
        Promise<U>;
      return:
        type:
          - Promise<U>
        description: ''
