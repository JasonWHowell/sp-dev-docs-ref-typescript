### YamlMime:UniversalReference
items:
  - uid: sp-core-library.ServiceKey
    summary: >-
      The ServiceKey is a lookup key that is used when calling
      [ServiceScope.consume()](xref:sp-core-library.ServiceScope.consume) to fetch a dependency.
    remarks: >-
      Every service key also provides a default implementation of the dependency, which will be automatically created in
      the root scope if the dependency is not found. Providing a default implementation ensures that new dependencies
      can be safely introduced without inadvertently breaking components that are loaded by an older host that does not
      provide the new dependency.
    name: ServiceKey
    fullName: ServiceKey
    langs:
      - typeScript
    type: class
    package: sp-core-library
    children:
      - sp-core-library.ServiceKey.create
      - sp-core-library.ServiceKey.createCustom
      - sp-core-library.ServiceKey.defaultCreator
      - sp-core-library.ServiceKey.id
      - sp-core-library.ServiceKey.name
  - uid: sp-core-library.ServiceKey.create
    summary: >-
      Constructs a new ServiceKey whose default implementation will be a new instance of a TypeScript class that accepts
      the standard constructor parameter.
    remarks: >-
      If you want to specify custom constructor parameters, use
      [ServiceKey.createCustom()](xref:sp-core-library.ServiceKey.createCustom) instead.
    name: 'create(name, serviceClass)'
    fullName: 'create(name, serviceClass)'
    langs:
      - typeScript
    type: method
    syntax:
      content: |-
        static create<TKey>(name: string, serviceClass: {
                new (serviceScope: ServiceScope): TKey;
            }): ServiceKey<TKey>;
      return:
        type:
          - ServiceKey<TKey>
        description: the newly created ServiceKey
      parameters:
        - id: name
          description: A name such as "my-package.IMyService" which should be unique across packages.
          type:
            - string
        - id: serviceClass
          description: the TypeScript class that implements the service.
          type:
            - |-
              {
                      new (serviceScope: ServiceScope): TKey;
                  }
  - uid: sp-core-library.ServiceKey.createCustom
    summary: Constructs a new ServiceKey whose default implementation will be obtained by invoking the specified callback.
    name: 'createCustom(name, defaultCreator)'
    fullName: 'createCustom(name, defaultCreator)'
    langs:
      - typeScript
    type: method
    syntax:
      content: 'static createCustom<TKey>(name: string, defaultCreator: ServiceCreator<TKey>): ServiceKey<TKey>;'
      return:
        type:
          - ServiceKey<TKey>
        description: the newly created service key
      parameters:
        - id: name
          description: A name such as "my-package.IMyService" which should be unique across packages.
          type:
            - string
        - id: defaultCreator
          description: a callback that returns an object that implements the T interface
          type:
            - ServiceCreator<TKey>
  - uid: sp-core-library.ServiceKey.defaultCreator
    summary: A callback function that constructs the default instance of this service.
    name: defaultCreator
    fullName: defaultCreator
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly defaultCreator: ServiceCreator<T>;'
      return:
        type:
          - ServiceCreator<T>
  - uid: sp-core-library.ServiceKey.id
    summary: A unique identifier for this service key.
    remarks: >-
      This identifier is an automatically generated string that will be unique for the lifetime of the page. Callers
      should not make assumptions about the formatting of this string. It is currently based on a global counter, but
      this may change in the future.


      The ServiceScope uses this identifier internally as a dictionary key for finding services. The ServiceKey is meant
      to be unique, even if multiple instances of the same library are loaded on the same page, even if the same name
      was passed to ServiceKey.create(). This is because each call to ServiceKey.create() could potentially provide a
      different defaultCreator implementation, whereas one of the design goals of ServiceScope is that the order in
      which libraries are loaded should never affect the resulting tree of scopes.
    name: id
    fullName: id
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly id: string;'
      return:
        type:
          - string
  - uid: sp-core-library.ServiceKey.name
    summary: The name of the service.
    remarks: >-
      This name is used for logging and diagnostic purposes only. To make it unique, the recommended convention is the
      package name, followed by a period, followed by the class or interface name.


      The system does not assume that this string is unique. Instead, the
      [ServiceKey.id](xref:sp-core-library.ServiceKey.id) is used wherever a lookup key is needed.
    name: name
    fullName: name
    langs:
      - typeScript
    type: property
    syntax:
      content: 'readonly name: string;'
      return:
        type:
          - string
