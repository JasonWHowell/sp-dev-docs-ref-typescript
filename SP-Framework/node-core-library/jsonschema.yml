### YamlMime:UniversalReference
items:
  - uid: node-core-library.JsonSchema
    summary: "> This API is provided as a preview for developers and may change based on feedback that we receive.  Do not use this API in a production environment.\r\n\r\nRepresents a JSON schema that can be used to validate JSON data files loaded by the JsonFile class."
    remarks: >
      The schema itself is normally loaded and compiled later, only if it is actually required to validate an input. To
      avoid schema errors at runtime, it's recommended to create a unit test that calls JsonSchema.ensureCompiled() for
      each of your schema objects.
    name: JsonSchema
    fullName: node-core-library.JsonSchema
    langs:
      - typeScript
    type: class
    package: node-core-library
    children:
      - node-core-library.JsonSchema.ensureCompiled
      - node-core-library.JsonSchema.fromFile
      - node-core-library.JsonSchema.fromLoadedObject
      - node-core-library.JsonSchema.shortName
      - node-core-library.JsonSchema.validateObject
      - node-core-library.JsonSchema.validateObjectWithCallback
  - uid: node-core-library.JsonSchema.ensureCompiled
    summary: |
      If not already done, this loads the schema from disk and compiles it.


      ### Remarks

      Any dependencies will be compiled as well.
    remarks: |
      Any dependencies will be compiled as well.
    name: ensureCompiled()
    fullName: node-core-library.JsonSchema.ensureCompiled
    langs:
      - typeScript
    type: method
    syntax:
      content: 'public ensureCompiled(): void;'
      return:
        type:
          - void
        description: ''
  - uid: node-core-library.JsonSchema.fromFile
    summary: >
      > This API is provided as a preview for developers and may change based on feedback that we receive.  Do not use this API in a production environment.
      
      
      Registers a JsonSchema that will be loaded from a file on disk.



      ### Remarks


      NOTE: An error occurs if the file does not exist; however, the file itself is not loaded or validated until it the
      schema is actually used.
    remarks: >
      NOTE: An error occurs if the file does not exist; however, the file itself is not loaded or validated until it the
      schema is actually used.
    name: fromFile()
    fullName: node-core-library.JsonSchema.fromFile
    langs:
      - typeScript
    type: method
    syntax:
      content: 'public static fromFile(filename: string, options?: IJsonSchemaFromFileOptions): JsonSchema;'
      return:
        type:
          - JsonSchema
        description: ''
  - uid: node-core-library.JsonSchema.fromLoadedObject
    summary: >
      Registers a JsonSchema that will be loaded from a file on disk.



      ### Remarks


      NOTE: An error occurs if the file does not exist; however, the file itself is not loaded or validated until it the
      schema is actually used.
    remarks: >
      NOTE: An error occurs if the file does not exist; however, the file itself is not loaded or validated until it the
      schema is actually used.
    name: fromLoadedObject()
    fullName: node-core-library.JsonSchema.fromLoadedObject
    langs:
      - typeScript
    type: method
    syntax:
      content: 'public static fromLoadedObject(schemaObject: Object): JsonSchema;'
      return:
        type:
          - JsonSchema
        description: ''
  - uid: node-core-library.JsonSchema.shortName
    summary: >
      Returns a short name for this schema, for use in error messages.



      ### Remarks


      If the schema was loaded from a file, then the base filename is used. Otherwise, the "id" field is used if
      available.
    remarks: >
      If the schema was loaded from a file, then the base filename is used. Otherwise, the "id" field is used if
      available.
    name: shortName
    fullName: node-core-library.JsonSchema.shortName
    langs:
      - typeScript
    type: property
    syntax:
      content: 'shortName: string;'
      return:
        type:
          - string
  - uid: node-core-library.JsonSchema.validateObject
    summary: >
      Validates the specified JSON object against this JSON schema. If the validation fails, an exception will be
      thrown.
    name: 'validateObject(jsonObject, filenameForErrors, options)'
    fullName: node-core-library.JsonSchema.validateObject
    langs:
      - typeScript
    type: method
    syntax:
      content: >-
        public validateObject(jsonObject: Object, filenameForErrors: string, options?: IJsonSchemaValidateOptions):
        void;
      return:
        type:
          - void
        description: ''
      parameters:
        - id: jsonObject
          description: |
            The JSON data to be validated
          type:
            - Object
        - id: filenameForErrors
          description: |
            The filename that the JSON data was available, or an empty string if not applicable
          type:
            - string
        - id: options
          description: |
            Other options that control the validation
          type:
            - IJsonSchemaValidateOptions
  - uid: node-core-library.JsonSchema.validateObjectWithCallback
    summary: >
      Validates the specified JSON object against this JSON schema. If the validation fails, a callback is called for
      each validation error.
    name: validateObjectWithCallback()
    fullName: node-core-library.JsonSchema.validateObjectWithCallback
    langs:
      - typeScript
    type: method
    syntax:
      content: "public validateObjectWithCallback(jsonObject: Object,\r\n    errorCallback: (errorInfo: IJsonSchemaErrorInfo) => void): void;"
      return:
        type:
          - void
        description: ''
